package kcloud.routesimport io.ktor.http.*import io.ktor.server.application.*import io.ktor.server.request.*import io.ktor.server.response.*import io.ktor.server.routing.*import javax.crypto.Cipherimport javax.crypto.SecretKeyimport javax.crypto.spec.IvParameterSpecimport javax.crypto.spec.SecretKeySpecfun Application.configureCryptRouting() {    routing {        post("/crypt/make") {            call.respondText("-23,-87,-81,10,69,-20,66,-126,50,9,3,80,-66,-77,6,-57,-14,-103,-14,15,111,103,-97,16,-96,22,-36,120,100,-99,-115,114")        }        post("/crypt/en") {            fun aesEncrypt(data: ByteArray, secretKey: SecretKey): ByteArray {                val cipher = Cipher.getInstance("AES/CBC/PKCS5Padding")                val ivParameterSpec = IvParameterSpec(ByteArray(16)) // Use a secure IV in production                cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivParameterSpec)                return cipher.doFinal(data)            }            fun stringArraIntoByteArra(string: String): ByteArray {                var e = byteArrayOf()                for ((index, i) in string.split(",").withIndex()) {                    e += byteArrayOf(i.toByte())                }                return e            }            val body = call.receive<Map<String, String>>()            val newKey = stringArraIntoByteArra(body["key"]!!)            val secretKey: SecretKey = SecretKeySpec(newKey, "AES")            val crypt = aesEncrypt(body["message"]!!.toByteArray(), secretKey).joinToString(",")            call.respondText(crypt)        }        post("/crypt/de") {            fun byteArraIntoString(byteArray: ByteArray): String {                return byteArray.joinToString(separator = ",") { it.toString() }            }            fun stringArraIntoByteArra(string: String): ByteArray {                var e = byteArrayOf()                for ((index, i) in string.split(",").withIndex()) {                    e += byteArrayOf(i.toByte())                }                return e            }            fun aesDecrypt(encryptedData: ByteArray, secretKey: SecretKey): ByteArray {                val cipher = Cipher.getInstance("AES/CBC/PKCS5Padding")                val ivParameterSpec = IvParameterSpec(ByteArray(16)) // Use the same IV as used in encryption                cipher.init(Cipher.DECRYPT_MODE, secretKey, ivParameterSpec)                return cipher.doFinal(encryptedData)            }            val body = call.receive<Map<String, String>>()            val newKey = stringArraIntoByteArra(body["key"]!!)            val secretKey: SecretKey = SecretKeySpec(newKey, "AES")            val crypt = aesDecrypt(stringArraIntoByteArra(body["message"]!!), secretKey)            call.respondText(String(crypt))        }    }}